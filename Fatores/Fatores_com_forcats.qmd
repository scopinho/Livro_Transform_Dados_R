# Fatores com FORCATS

## Introdução

A seguir temos vários exemplos de tratamento de variáveis qualitativas o pacote FORCATS do R.

Para saber mais sobre este pacote, acesse:

<https://cran.r-project.org/package=forcats>.

::: callout-warning
Para melhor utilizar este material, é importante que você tenha uma introdução à linguagem R e saiba carregar pacotes (packages) no R. Para mais informações acesse:

<https://education.rstudio.com/learn/beginner/>.
:::

Para os exemplos, iremos carregar o seguinte pacote:

-   **tidyverse**

```{r}
#| echo: true
library (tidyverse)
```

### Exemplos da Folha de Referência

A maioria dos exemplos, visam ajudar na interpretação dos exemplos e funções encontradas na [**Folha de Referência**](https://github.com/scopinho/R-cheatsheets/blob/main/translations/portuguese/factors_pt_br.pdf) do stringr disponível no site do [RStudio](rstudio.com).

------------------------------------------------------------------------

## Introdução

**Fatores** são estruturas de dados da linguagem R utilizadas para representar **variáveis qualitativas** (categóricas). Apesar de todo o suporte da linguagem para este tipo de dados, o pacotes forcats facilita muito este trabalho, principalmente quando precisamos definir níveis, alterar sua ordem, etc.

::: {.callout-note appearance="simple"}
Para uma breve explicação do que são variáveis qualitativas, também chamadas de categóricas, veja a seção: [Tipos de Variáveis](http://localhost:3613/Visualizacao/Visualizacao_de_dados_com_ggplot2.html#tipos-de-vari%C3%A1veis).
:::

## Base de Dados

Par os exemplos a seguir usaremos algumas tabelas já instaladas com o R ou o pacote tidyverse como:

::: panel-tabset
## gss_cats

```{r}
gss_cat
```

## diamonds

```{r}
diamonds  
```

## starwars

```{r}
starwars
```

## PlantGrowth

```{r}
PlantGrowth
```
:::

Note que as variáveis do tipo **fator** são marcadas como "**fct**" nas tabelas acima.

## Fatores

A linguagem R representa **dados categóricos** através de um tipo de dados chamado **Fator** (factor). Um fator é um vetor de inteiros com um atributo de **nível** (level) associado à ele. Este nível armazena um conjunto de mapeamentos entre o inteiro e o valor categórico. Quando você visualiza um fator, o R não mostra os inteiros, mas sim, os níveis associados à eles.

![](images/factors-01.png){width="253"}

#### factor

Use esta função para criar um fator.

```{r}
f <- factor(c("a", "c", "b", "a"), levels = c("a", "b", "c"))
f
```

No exemplos acima, criamos um fator à partir de um vetor (a,b,c,a) e definimos os níveis 1, 2 e 3 como "a,b,c".

::: callout-note
Se os **níveis** de um fator **não forem especificados**, o R irá pegar os caracteres únicos do vetor e colocá-los em ordem alfabética.

```{r}
f <- factor(c("a", "c", "b", "a"))
f
```
:::

#### as_fator

Podemos também converter um outro tipo de dado para fator utilzando a função as_factor.

```{r}
vetor <- c("a", "b", "c", "a")
as_factor(vetor)
```

#### levels

Use para retornar ou definir os níveis de um fator.

```{r}
# para retornar os níveis:
levels(f)

# Para definir os níveis:
levels (f) <- c("x", "y", "z")
f
levels (f) <- c("a", "b", "c")
f
```

Veja outro exemplo:

```{r}

f_meses <- factor(c("Jan", "Fev", "Mar", "Abr"))
f_meses
```

Como não definimos os níveis do factor, ele colocou em ordem alfabética à partir dos valores definidos.

Para colocar os nível na ordem dos meses, podemos fazer:

```{r}
meses <- c("Jan", "Fev", "Mar", "Abr")
levels (f_meses) <- meses
f_meses
```

::: callout-tip
Estas configurações adequadas dos meses, são importantes em diversas ocasiões, dentre elas, quando precisamos gerar um gráfico com a variáveis categórica no GGPLOT, pois este leva em consideração os níveis para definir a ordem no gráfico.
:::

## Inspecionando Fatores

#### fct_count

Use para contar os valores de cada nível.

```{r}
fct_count(f)
```

#### fct_match

Use para encontrar níveis.

```{r}
fct_match(f, "a")
```

#### fct_unique

Use para retornar valores únicos de um fator, removendo os duplicados.

```{r}
fct_unique(f)
```

## Combinando Fatores

#### fct_c

Use para combinar fatores com níveis diferentes.

```{r}
f1 <- factor(c("a", "b", "c"))
f2 <- factor(c("b", "a"))
```

```{r}
f1
f2
```

```{r}
fct_c(f1,f2)
```

::: callout-tip
Use **fct_cross**() para criar um fator à partir de dois ou mais fatores, gerando níveis para todas as combinações possíveis.
:::

#### fct_unify

Use para padronizar os níveis à partir de uma lista de fatores.

```{r}
list(f1, f2)
```

```{r}
fct_unify(list(f2, f1))
```

Veja que no exemplo acima, os níveis de ambas as listas agora possuem os mesmos valores.

## Mudando as ordens dos Níveis

#### fct_relevel

Use para redefinir a **ordem dos níveis**.

```{r}
fct_relevel(f, c("b", "c", "a"))
```

#### fct_reorder

Use para definir a **ordem dos níveis**, baseadas em **outra variável**. Ou seja, ela ordena os níveis de acordo com esta outra variável. Para explicar melhor, vamos criar um data frame (df) e definir a variavel color com fator:

```{r}
df <- tibble::tribble(
  ~color,     ~a, ~b,
  "blue",      1,  2,
  "green",     6,  2,
  "purple",    3,  3,
  "red",       2,  3,
  "yellow",    5,  1
)

df$color <- factor(df$color)
df
```

Agora, vamos analisar os níveis de color e depois utilizar a função fct_order() para reordenar este níveis de acordo com os números definidos na variável "a".

```{r}
df$color
```

```{r}
fct_reorder(df$color, df$a)
```

No próximo exemplo, utilzamos a função **fct_reorder** para ordenar os níveis da variável "**group**" em função dos valores da variável "**weight**".

Veja como fica um gráfico de boxplot, sem e depois com os níveis reordenados:

```{r}
#| layout-ncol: 2

#Sem ftc_reorder
PlantGrowth |> 
  ggplot(aes(group , weight, fill = group)) + 
  geom_boxplot()

#Com fct_reorder
PlantGrowth |> 
  ggplot(aes(fct_reorder(group, weight) , weight, fill = group)) + 
  geom_boxplot()
```

#### fct_reorder2

Use para definir a **ordem do fator com base nos valores**.

Ainda usando o data frame (df) criado visto na função fct_reorder, vejamos a diferença para utilizar o fct_reorder2(). Neste caso, utilizamos duas variáveis (a e b) para reordenar a variável color.

```{r}
#| layout-nrow: 2
df 
fct_reorder2(df$color, df$a, df$b)
```

Em geral, utilzamos este tipo de reordenação de uma variável fator de acordo com duas variáveis, quando queremos visualizar uma estética não posicional em um gráfico, como color, size, fill, etc.

```{r}
#| layout-ncol: 2

# Sem a reordenação de nível com fct_reorder2
diamonds |> 
  ggplot(aes(carat, 
             price, color = color)) + 
             #color = fct_reorder2 (color, carat, price))) + 
  geom_smooth()

# Com a reordenação de nível com fct_reorder2
diamonds |> 
  ggplot(aes(carat, 
             price, 
             color = fct_reorder2 (color, carat, price))) + 
  labs(color = "color")+
  geom_smooth()
```

#### fct_infreq

Use para reordenar os níveis de um fator, pela primeira ordem de **frequência** dos dados. Maior frequência aparece em primeiro.

```{r}
f3 <- factor(c("c", "c", "a"))
fct_infreq(f3)
```

::: callout-tip
Se quiser reordenar os níveis usando os valores numéricos dos níveis, use **fct_inseq**().
:::

#### fct_inorder

Use para **reordenar** os níveis de um fator, pela **ordem** **de aparecimento** dos dados na linhas.

```{r}
f2
fct_inorder(f2)
```

#### fct_rev

Use para **inverter** a ordem dos níveis de um vetor.

```{r}
f4 <- factor(c("a","b","c"))
f4
fct_rev(f4)
```

#### fct_shift

Use para **deslocar** a ordem dos níveis de um fator. Use o argumento n= para deslocar n casas.

```{r}
f
fct_shift(f)
```

#### fct_shuffle

Use para embaralhar randomicamente dos níveis de um fator.

```{r}
fct_shuffle(f4)
fct_shuffle(f4)
```

## Mudando os valores dos Níveis

#### fct_recode

Use para mudar manualmente os valores dos níveis de um fator.

```{r}
f
fct_recode(f, v = "a", x = "b", z = "c")
```

#### fct_relabel

Use para mudar **programaticamente** os nomes. Esta função aceita a sintaxe de funções do pacote purrr. Pode-se usar expressões regulares, etc.

```{r}
fct_relabel(f, ~ paste0("x", .x))
```

#### fct_anon

Use para anonimizar os valores dos níveis com números randômicos.

```{r}
fct_anon(f)
```

#### fct_collapse

Use para **agrupar** níveis definindo grupos **manualmente**.

```{r}
f
fct_collapse(f, x = c("a", "b"))
```

#### fct_lump_min

Use para agrupar em um único grupo os níveis de um fator que aparecem menos que n vezes.

```{r}
f
fct_lump_min(f, min = 2)
```

::: callout-tip
Use o argumento **other_level=** para dar um nome defierente de "Other" quando precisar.
:::

Este grupo de funções tem também:

**fct_prop**: Para agrupar em um único grupo valores com proporções menores que n% vezes.

**fct_lowfreq**: Para agrupar em um único grupo valores com as menores frequências, garantindo que o grupo "other" tem o menor nível.

**fct_lump_n**: Para agrupar em um único grupo valores exceto queles com o número de frequência maior que o argumento n=.

#### fct_other

Use para definir **manualmente** os níveis que irão pertecer ao grupo "other".

```{r}
f
fct_other(f, keep = c("a", "b"))
```

## Adicionando ou Removendo Níveis

#### fct_drop

Use para remover níveis que não estão sendo usados.

```{r}
f5 <- factor(c("a","b"),c("a","b","x"))
f5
f6 <- fct_drop(f5)
f6
```

#### fct_expand

Use para adicionar níveis a um fator.

```{r}
fct_expand(f6, "x")
```

#### fct_explicit_na

Use para definir níveis "NA" como (Missing). Isto é útil quando quiser deixar explícito em gráficos os valores ausentes (Missings).

```{r}
fct_explicit_na(factor(c("a", "b", NA)))
```

```{r}
#| layout-ncol: 2
tb <- tribble(~x, ~y,
        "A", 1,
        "A", 2,
        "A", 2,
        "B", 3,
        NA, NA,
        "D", 5,
        NA, NA,
        "D", 4,)

tb$x <- as_factor(tb$x)

tb |> ggplot(aes(x)) +
  geom_bar()

tb |> ggplot(aes(fct_explicit_na(x, na_level = "Sem Valores"))) +
  geom_bar()

```
